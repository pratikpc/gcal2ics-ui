{"version":3,"sources":["App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","classes","useState","embed","setEmbed","ical","setICals","tooltipShown","setTooltipOpen","useEffect","gcal2ics","err","className","AppBar","position","Toolbar","Typography","variant","style","left","top","transform","Grid","container","direction","item","xs","TextField","required","value","type","fullWidth","label","helperText","onChange","target","Button","id","onClick","Tooltip","open","onClose","title","a","navigator","clipboard","writeText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAeMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACpCC,KAAM,CACHC,SAAU,GAEbC,MAAO,CACJC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eAqGjBC,MAlGf,WACG,IAAMC,EAAUd,IADJ,EAGce,mBACvB,mEAJS,mBAGLC,EAHK,KAGEC,EAHF,OAMaF,mBAAS,IANtB,mBAMLG,EANK,KAMCC,EAND,OAO2BJ,oBAAS,GAPpC,mBAOLK,EAPK,KAOSC,EAPT,KAiBZ,OARAC,qBAAU,WACP,IACGH,EAASI,IAASP,IACnB,MAAOQ,GACNL,EAAS,OAEZ,CAACH,IAGD,sBAAKS,UAAWX,EAAQX,KAAxB,UACG,cAACuB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACG,cAACC,EAAA,EAAD,UACG,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKrB,MAAM,UAA/B,mDAKN,qBACGsB,MAAO,CACJJ,SAAU,WACVK,KAAM,MACNC,IAAK,MACLC,UAAW,yBALjB,SAQG,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAA1B,UACG,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACG,cAACC,EAAA,EAAD,CACGC,UAAQ,EACRC,MAAO1B,EACP2B,KAAK,MACLC,WAAW,EACXC,MAAM,YACNC,WAAW,YACXhB,QAAQ,SACRiB,SAAU,gBAAaL,EAAb,EAAGM,OAAUN,MAAb,OAA2BzB,EAASyB,QAGpD,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACG,cAACU,EAAA,EAAD,CACGL,WAAW,EACXM,GAAG,UACHC,QAAS,WACN,IACGhC,EAASI,IAASP,IACnB,MAAOQ,GACNL,EAAS,MAPlB,uBAcH,cAACgB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACG,cAACC,EAAA,EAAD,CACGE,MAAOxB,EACPgC,GAAG,OACHL,MAAM,YACNC,WAAW,YACXhB,QAAQ,SACRc,WAAW,MAGjB,cAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACG,cAACa,EAAA,EAAD,CACGC,KAAMjC,EACNkC,QAAS,kBAAMjC,GAAe,IAE9BkC,MAAM,SAJT,SAMG,cAACN,EAAA,EAAD,CACGC,GAAG,OACHN,WAAW,EACXO,QAAO,sBAAE,sBAAAK,EAAA,sEAEAC,UAAUC,UAAUC,UAAUzC,GAF9B,OAGNG,GAAe,GAHT,2CAHZ,+BClGrBuC,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,W","file":"static/js/main.0790959f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core';\n\nimport gcal2ics from 'gcal2ics';\n\nconst useStyles = makeStyles(theme => ({\n   root: {\n      flexGrow: 1\n   },\n   paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary\n   }\n}));\nfunction App() {\n   const classes = useStyles();\n\n   const [embed, setEmbed] = useState(\n      'https://calendar.google.com/calendar/embed?src=info@example.com'\n   );\n   const [ical, setICals] = useState('');\n   const [tooltipShown, setTooltipOpen] = useState(false);\n\n   useEffect(() => {\n      try {\n         setICals(gcal2ics(embed));\n      } catch (err) {\n         setICals('');\n      }\n   }, [embed]);\n\n   return (\n      <div className={classes.root}>\n         <AppBar position=\"static\">\n            <Toolbar>\n               <Typography variant=\"h3\" color=\"inherit\">\n                  Google Embedded Calendar to iCALs\n               </Typography>\n            </Toolbar>\n         </AppBar>\n         <div\n            style={{\n               position: 'absolute',\n               left: '50%',\n               top: '50%',\n               transform: 'translate(-50%, -50%)'\n            }}\n         >\n            <Grid container direction=\"row\">\n               <Grid item xs={9}>\n                  <TextField\n                     required\n                     value={embed}\n                     type=\"url\"\n                     fullWidth={true}\n                     label=\"Embed URL\"\n                     helperText=\"Embed URL\"\n                     variant=\"filled\"\n                     onChange={({ target: { value } }) => setEmbed(value)}\n                  />\n               </Grid>\n               <Grid item xs={3}>\n                  <Button\n                     fullWidth={true}\n                     id=\"convert\"\n                     onClick={() => {\n                        try {\n                           setICals(gcal2ics(embed));\n                        } catch (err) {\n                           setICals('');\n                        }\n                     }}\n                  >\n                     Convert\n                  </Button>\n               </Grid>\n               <Grid item xs={9}>\n                  <TextField\n                     value={ical}\n                     id=\"ical\"\n                     label=\"iCals URL\"\n                     helperText=\"iCals URL\"\n                     variant=\"filled\"\n                     fullWidth={true}\n                  />\n               </Grid>\n               <Grid item xs={3}>\n                  <Tooltip\n                     open={tooltipShown}\n                     onClose={() => setTooltipOpen(false)}\n                     // onOpen={() => setTooltipOpen(true)}\n                     title=\"Copied\"\n                  >\n                     <Button\n                        id=\"copy\"\n                        fullWidth={true}\n                        onClick={async () => {\n                           // Copy to Clipboard\n                           await navigator.clipboard.writeText(ical);\n                           setTooltipOpen(true);\n                        }}\n                     >\n                        Copy\n                     </Button>\n                  </Tooltip>\n               </Grid>\n            </Grid>\n         </div>\n      </div>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// Disable telemetry\n// reportWebVitals();\n"],"sourceRoot":""}