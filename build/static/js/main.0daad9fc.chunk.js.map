{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","classes","useState","embed","setEmbed","ical","setICals","tooltipShown","setTooltipOpen","useEffect","gcal2ics","className","AppBar","position","Toolbar","Typography","variant","style","left","top","transform","Grid","container","direction","item","xs","TextField","required","value","type","fullWidth","label","helperText","onChange","target","Button","onClick","console","log","Tooltip","open","onClose","title","a","navigator","clipboard","writeText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAeMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACpCC,KAAM,CACHC,SAAU,GAEbC,MAAO,CACJC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eAwFjBC,MArFf,WACG,IAAMC,EAAUd,IADJ,EAGce,mBAAS,mEAHvB,mBAGLC,EAHK,KAGEC,EAHF,OAIaF,mBAAS,IAJtB,mBAILG,EAJK,KAICC,EAJD,OAK2BJ,oBAAS,GALpC,mBAKLK,EALK,KAKSC,EALT,KAWZ,OAJAC,qBAAU,WACPH,EAASI,IAASP,MAClB,CAACA,IAGD,sBAAKQ,UAAWV,EAAQX,KAAxB,UACG,cAACsB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACG,cAACC,EAAA,EAAD,UACG,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKpB,MAAM,UAA/B,mDAKN,qBACGqB,MAAO,CACJJ,SAAU,WACVK,KAAM,MACNC,IAAK,MACLC,UAAW,yBALjB,SAQG,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAA1B,UACG,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG/B,QAAS,EAA3B,SACG,cAACgC,EAAA,EAAD,CACGC,UAAQ,EACRC,MAAOzB,EACP0B,KAAK,MACLC,WAAW,EACXC,MAAM,YACNC,WAAW,YACXhB,QAAQ,SACRiB,SAAU,gBAAaL,EAAb,EAAGM,OAAUN,MAAb,OAA2BxB,EAASwB,QAGpD,cAACP,EAAA,EAAD,CAAMI,GAAI,EAAV,SACG,cAACU,EAAA,EAAD,CACGL,WAAW,EACXM,QAAS,WACNC,QAAQC,IAAI,KAAMnC,IAHxB,uBASH,cAACkB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACG,cAACC,EAAA,EAAD,CACGE,MAAOvB,EACP0B,MAAM,YACNC,WAAW,YACXhB,QAAQ,SACRc,WAAW,MAGjB,cAACT,EAAA,EAAD,CAAMI,GAAI,EAAV,SACG,cAACc,EAAA,EAAD,CACGC,KAAMjC,EACNkC,QAAS,kBAAMjC,GAAe,IAE9BkC,MAAM,SAJT,SAMG,cAACP,EAAA,EAAD,CACGL,WAAW,EACXM,QAAO,sBAAE,sBAAAO,EAAA,sEAEAC,UAAUC,UAAUC,UAAUzC,GAF9B,OAGNG,GAAe,GAHT,2CAFZ,+BC5ENuC,EAdS,SAACC,GAClBA,GAAeA,aAAuBC,UACvC,8BAAqBC,MAClB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAChCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJpBQ,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,SAM3Bb,M","file":"static/js/main.0daad9fc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\n\nimport gcal2ics from \"gcal2ics\";\n\nconst useStyles = makeStyles(theme => ({\n   root: {\n      flexGrow: 1\n   },\n   paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary\n   }\n}));\nfunction App() {\n   const classes = useStyles();\n\n   const [embed, setEmbed] = useState('https://calendar.google.com/calendar/embed?src=info@example.com');\n   const [ical, setICals] = useState('');\n   const [tooltipShown, setTooltipOpen] = useState(false);\n\n   useEffect(() => {\n      setICals(gcal2ics(embed));\n   }, [embed]);\n\n   return (\n      <div className={classes.root}>\n         <AppBar position=\"static\">\n            <Toolbar>\n               <Typography variant=\"h3\" color=\"inherit\">\n                  Google Embedded Calendar to iCALs\n               </Typography>\n            </Toolbar>\n         </AppBar>\n         <div\n            style={{\n               position: 'absolute',\n               left: '50%',\n               top: '50%',\n               transform: 'translate(-50%, -50%)'\n            }}\n         >\n            <Grid container direction=\"row\">\n               <Grid item xs={9} spacing={3}>\n                  <TextField\n                     required\n                     value={embed}\n                     type=\"url\"\n                     fullWidth={true}\n                     label=\"Embed URL\"\n                     helperText=\"Embed URL\"\n                     variant=\"filled\"\n                     onChange={({ target: { value } }) => setEmbed(value)}\n                  />\n               </Grid>\n               <Grid xs={3}>\n                  <Button\n                     fullWidth={true}\n                     onClick={() => {\n                        console.log('Hi', embed);\n                     }}\n                  >\n                     Convert\n                  </Button>\n               </Grid>\n               <Grid item xs={9}>\n                  <TextField\n                     value={ical}\n                     label=\"iCals URL\"\n                     helperText=\"iCals URL\"\n                     variant=\"filled\"\n                     fullWidth={true}\n                  />\n               </Grid>\n               <Grid xs={3}>\n                  <Tooltip\n                     open={tooltipShown}\n                     onClose={() => setTooltipOpen(false)}\n                     // onOpen={() => setTooltipOpen(true)}\n                     title=\"Copied\"\n                  >\n                     <Button\n                        fullWidth={true}\n                        onClick={async () => {\n                           // Copy to Clipboard\n                           await navigator.clipboard.writeText(ical);\n                           setTooltipOpen(true);\n                        }}\n                     >\n                        Copy\n                     </Button>\n                  </Tooltip>\n               </Grid>\n            </Grid>\n         </div>\n      </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n   if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(\n         ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n         }\n      );\n   }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}